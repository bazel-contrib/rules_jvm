load("@bazel_gazelle//:def.bzl", "gazelle_binary", "gazelle_generation_test")
load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

# Exclude all test data
# gazelle:exclude tests/

go_library(
    name = "kotlin",
    srcs = [
        "configure.go",
        "generate.go",
        "imports.go",
        "kotlin.go",
        "language.go",
        "resolver.go",
    ],
    importpath = "github.com/bazel-contrib/rules_jvm/gazelle/kotlin",
    visibility = ["//visibility:public"],
    deps = [
        "//gazelle/common",
        "//gazelle/common/git",
        "//gazelle/kotlin/kotlinconfig",
        "//gazelle/kotlin/parser",
        "@bazel_gazelle//config:go_default_library",
        "@bazel_gazelle//label:go_default_library",
        "@bazel_gazelle//language:go_default_library",
        "@bazel_gazelle//repo:go_default_library",
        "@bazel_gazelle//resolve:go_default_library",
        "@bazel_gazelle//rule:go_default_library",
        "//java/gazelle/javaconfig",
        "//java/gazelle/private/java",
        "//java/gazelle/private/maven",
        "//java/gazelle/private/types",
        "@com_github_emirpasic_gods//maps/treemap",
        "@com_github_emirpasic_gods//sets/treeset",
        "@com_github_emirpasic_gods//utils",
        "@com_github_rs_zerolog//:zerolog",
    ],
)

# Internal only for tests
gazelle_binary(
    name = "gazelle_kotlin_binary",
    languages = [":kotlin"],
    visibility = ["//visibility:private"],
)

# A separate generation test for each tests/* test case
[
    gazelle_generation_test(
        name = "%s_test" % test_workspace.split("/")[1],
        gazelle_binary = "gazelle_kotlin_binary",
        test_data = glob([test_workspace, "%s/**" % test_workspace.replace("/WORKSPACE", "")]),
    )
    for test_workspace in glob(["tests/**/WORKSPACE"])
]

go_test(
    name = "kotlin_test",
    srcs = ["kotlin_test.go"],
    embed = [":kotlin"],
)
