load("@rules_java//java:defs.bzl", "java_test")
load("@rules_jvm_external//:defs.bzl", "artifact")
load("//java:defs.bzl", "java_junit5_test", "java_test_suite", "junit5_deps", "junit5_vintage_deps")

# Ignore this directory because of the wrong package name.
# gazelle:ignore

PACKAGE_NAME_TEST = [
    "WrongPackageNameTest.java",
]

PARALLEL_TEST = [
    "ParallelTest.java",
]

SHARDING_TEST = [
    "ShardingTest.java",
]

VINTAGE_NESTED_TEST = [
    "NestedClassesVintageTest.java",
]

java_test_suite(
    name = "small-tests",
    size = "small",
    srcs = glob(
        ["*.java"],
        exclude = PACKAGE_NAME_TEST + PARALLEL_TEST + SHARDING_TEST + VINTAGE_NESTED_TEST,
    ),
    exclude_engines = ["junit-vintage"],
    include_engines = ["junit-jupiter"],
    runner = "junit5",
    test_suffixes_excludes = ["BaseTest.java"],
    deps = [
        "//java/src/com/github/bazel_contrib/contrib_rules_jvm/junit5",
        artifact("com.github.spotbugs:spotbugs-annotations", "contrib_rules_jvm_deps"),
        artifact("org.junit.jupiter:junit-jupiter-api", "contrib_rules_jvm_tests"),
        artifact("org.junit.jupiter:junit-jupiter-params", "contrib_rules_jvm_tests"),
        artifact("org.junit.platform:junit-platform-engine", "contrib_rules_jvm_tests"),
        artifact("org.junit.platform:junit-platform-testkit", "contrib_rules_jvm_tests"),
        artifact("org.mockito:mockito-core", "contrib_rules_jvm_tests"),
        artifact("org.opentest4j:opentest4j", "contrib_rules_jvm_tests"),
    ] + junit5_vintage_deps("contrib_rules_jvm_tests"),
)

java_test_suite(
    name = "vintage-nested-test",
    size = "small",
    srcs = [
        "NestedClassesVintageTest.java",
    ],
    exclude_engines = ["junit-jupiter"],
    include_engines = ["junit-vintage"],
    runner = "junit5",
    deps = [
        "//java/src/com/github/bazel_contrib/contrib_rules_jvm/junit5",
    ] + junit5_vintage_deps("contrib_rules_jvm_tests"),
)

# Test that we can set the package name properly. We do this by
# setting the `package` attribute deliberately rather than letting
# the value be guessed at by the runner.
java_test_suite(
    name = "custom-tests",
    size = "small",
    srcs = PACKAGE_NAME_TEST,
    package = "com.github.bazel_contrib.contrib_rules_jvm.custom",
    runner = "junit5",
    deps = [
        artifact("org.junit.jupiter:junit-jupiter-api", "contrib_rules_jvm_tests"),
    ] + junit5_deps("contrib_rules_jvm_tests"),
)

# Use a Bazel test runner with a known good test sharding implementation.
java_test(
    name = "sharding-test",
    size = "small",
    srcs = SHARDING_TEST,
    shard_count = 4,
    test_class = "com.github.bazel_contrib.contrib_rules_jvm.junit5.ShardingTest",
    deps = [
        "//java/src/com/github/bazel_contrib/contrib_rules_jvm/junit5",
        "//java/test/com/github/bazel_contrib/contrib_rules_jvm/junit5/sample:sharding-test-tests",
        artifact("org.junit.jupiter:junit-jupiter-api", "contrib_rules_jvm_tests"),
        artifact("org.junit.platform:junit-platform-engine", "contrib_rules_jvm_tests"),
    ] + junit5_deps("contrib_rules_jvm_tests"),
)

java_junit5_test(
    name = "parallel-test",
    size = "small",
    srcs = PARALLEL_TEST,
    jvm_flags = [
        "-Djunit.jupiter.execution.parallel.enabled=true",
        "-Djunit.jupiter.execution.parallel.mode.default=concurrent",
        "-Djunit.jupiter.execution.parallel.config.strategy=fixed",
        "-Djunit.jupiter.execution.parallel.config.fixed.parallelism=2",
    ],
    tags = ["cpu:2"],
    test_class = "com.github.bazel_contrib.contrib_rules_jvm.junit5.ParallelTest",
    deps = [
        "//java/src/com/github/bazel_contrib/contrib_rules_jvm/junit5",
        artifact("org.junit.jupiter:junit-jupiter-api", "contrib_rules_jvm_tests"),
        artifact("org.junit.platform:junit-platform-engine", "contrib_rules_jvm_tests"),
    ] + junit5_deps("contrib_rules_jvm_tests"),
)
