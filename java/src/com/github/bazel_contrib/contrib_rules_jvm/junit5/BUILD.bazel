load("@rules_java//java:defs.bzl", "java_binary", "java_library")
load("//java/private:artifact.bzl", "artifact")

# We want to be able to compile the test runner, but we don't want to
# expose any of its dependencies, since we expect whoever is running
# tests to add them themselves, and we don't want to pollute the classpath.
# As such, we do this rather weird thing to make sure we have the runner
# but none of its dependencies.
java_import(
    name = "junit5",
    jars = [
        ":junit5-copy-file",
    ],
    visibility = [
        "//visibility:public",
    ],
    deps = [
        ":allow",
        ":system-exit-toggle",
    ],
)

java_library(
    name = "allow",
    srcs = ["allow.java"],
    # At some point the SecurityManager class is going to go away, so fix a release in which it is
    # available.
    javacopts = [
        "--release",
        "11",
    ],
    deps = [
        # There must never be dependencies
    ],
)

genrule(
    name = "junit5-copy-file",
    srcs = [":junit5-compile"],
    outs = ["junit5-runner.jar"],
    cmd = "cp $< $@",
)

java_library(
    name = "junit5-compile",
    srcs = glob(
        ["*.java"],
        exclude = [
            "allow.java",
            "Java17SystemExitToggle.java",
            "SystemExitToggle.java",
        ],
    ),
    javacopts = [
        # Target Java 11, no matter which JDK we're on so that we
        # can be sure that `SecurityManager` is present, even if
        # someone rebuilds on a JDK that doesn't have it.
        "--release",
        "11",
    ],
    resource_strip_prefix = package_name(),
    resources = ["META-INF/services/org.junit.jupiter.api.extension.Extension"],
    deps = [
        ":system-exit-toggle",
        # The only dependencies here are those required to run
        # a junit5 test. We try not to pollute the classpath, so
        # be very careful when adding new deps here.
        #
        # junit-jupiter-api is only a compilation dependency and not listed in JUNIT5_DEPS. This is
        # fine as it is a transitive dependency of junit-jupiter-engine and will thus be available
        # at runtime.
        artifact("org.junit.jupiter:junit-jupiter-api"),
        artifact("org.junit.jupiter:junit-jupiter-engine"),
        artifact("org.junit.platform:junit-platform-commons"),
        artifact("org.junit.platform:junit-platform-engine"),
        artifact("org.junit.platform:junit-platform-launcher"),
        artifact("org.junit.platform:junit-platform-reporting"),
        artifact("org.opentest4j:opentest4j"),
    ],
)

# Do not build with --release 8 to work around https://bugs.openjdk.org/browse/JDK-8214165 (sun.misc
# is not available with that flag), do not build for a higher release to support Java 8 runtimes.
# Files in srcs must not reference any # classes that are likely to go away in future Java releases,
# in particular SecurityManager.
java_library(
    name = "system-exit-toggle",
    srcs = [
        "Java17SystemExitToggle.java",
        "SystemExitToggle.java",
    ],
)

java_binary(
    name = "JUnit5Runner",
    main_class = "com.github.bazel_contrib.contrib_rules_jvm.junit5.JUnit5Runner",
    visibility = ["//visibility:public"],
    runtime_deps = [
        ":junit5",
    ],
)
